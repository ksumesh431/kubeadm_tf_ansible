- name: Basic Setup
  hosts: all
  gather_facts: false
  become: false
  tasks:
    - name: Wait 5 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 5
        timeout: 200
      vars:
        ansible_connection: local

    - name: Check current hostname
      command: hostname
      register: current_hostname
      become: true

    - name: Set a hostname
      ansible.builtin.hostname:
        name: "{{ node_hostname }}"
      become: true
      when: current_hostname.stdout != node_hostname


    - name: Copy /etc/hosts template
      ansible.builtin.copy:
        backup: true
        src: ./files/hosts
        dest: /tmp/hosts


    - name: Insert/Update configuration using a local file and validate it
      ansible.builtin.blockinfile:
        block: "{{ lookup('file', './files/hosts') }}"
        path: /etc/hosts
        backup: yes
      become: true


    - name: Disable swap on all nodes
      ansible.builtin.shell: swapoff -a
      become: true

    - name: kernel module prerequesites
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF
      become: true

    - name: add overlay module
      community.general.modprobe:
        name: overlay
        state: present
      become: true

    - name: add br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present
      become: true

    - name: sysctl params required by setup
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF
      become: true

    - name: apply sysctl params without reboot
      ansible.builtin.shell: sysctl --system
      become: true

    - name: create containerd config file
      ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml
      become: true

    - name: Install containerd pre-reqs
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
      become: true

    - name: add docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: true

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present
      become: true

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
      become: true

    - name: Install containerd.io
      ansible.builtin.apt:
        pkg:
          - containerd.io
      become: true

    - name: Enable containerd
      ansible.builtin.systemd:
        name: containerd
        daemon_reload: yes
        state: started
        enabled: yes
      become: true

    - name: Setup containerd to use systemd as cgroup
      ansible.builtin.copy:
        backup: true
        src: ./files/containerd-config.toml
        dest: /etc/containerd/config.toml
      become: true

    - name: Restart service cron, in all cases, also issue daemon-reload to pick up config changes
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: containerd
      become: true

    ## NOTE: kubeadm stuff
    - name: add Kubernetes apt-key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true
      become: true

    - name: add Kubernetes' APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        update_cache: yes
      become: true

    - name: Install kubadm, kubectl, kubelet
      ansible.builtin.apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl
      become: true

    - name: hold kubectl,kubeadm,kubelet packages
      ansible.builtin.shell: apt-mark hold kubelet kubectl kubeadm
      become: true

- name: Setup Control Plane Node
  hosts: master
  become: true
  tasks:
    - name: Check if kubeadm has already initialized the cluster
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_config

    - name: Initialize kubeadm if the cluster is not already initialized
      shell: |
        sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint {{ ansible_host }}:6443
      when: not kubeadm_config.stat.exists
      changed_when: not kubeadm_config.stat.exists

    - name: create ~/.kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: "0755"

    # - name: copy kubeconfig file
    #   shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    - name: Copy kubeconfig file
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes

    - name: set the correct permission on kubeconfig file
      shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: install flannel
      ansible.builtin.shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml

    - name: Copy kubeconfig file locally
      ansible.builtin.fetch:
        src: $HOME/.kube/config
        dest: ~/.kube/
        flat: yes

    - name: Generate join token for worker nodes
      ansible.builtin.shell: sudo kubeadm token create --print-join-command
      register: join_node_token

    - name: Save join command as variable
      ansible.builtin.set_fact:
        join_node: "{{ join_node_token.stdout_lines[0] }}"

- name: Setup Worker Nodes
  hosts: workers
  become: true
  tasks:
  - name: Check if kubelet configuration file exists (node already joined)
    stat:
      path: /etc/kubernetes/kubelet.conf
    register: kubelet_config

  - name: Add worker nodes to the cluster if not already joined
    shell: "sudo {{ hostvars['control_plane'].join_node }}"
    when: not kubelet_config.stat.exists

